<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type="text/xsl" href="utilities/xslstyle/xslstyle-docbook.xsl"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:xs="http://www.CraneSoftwrights.com/ns/xslstyle"
                exclude-result-prefixes="xs"
                version="2.0">

<xs:doc filename="massageXSLT4Schematron.xsl" vocabulary="DocBook"
        info="$Id$">
  <xs:title>
    Massage the output of Schematron transformation
  </xs:title>
  <para>
    The automaton in the Schematron stylesheet generation inappropriately
    processes a given attribute node by pushing its element children at
    the processor. But an attribute node never has element children, and so
    processors such as Saxon report an error message. This error message
    clutters the error output and so that push directive needs to be removed.
  </para>
</xs:doc>

<!--========================================================================-->
<xs:doc>
  <xs:title>Invocation parameters and input file</xs:title>
  <para>
    The input file is the output XSLT from Schematron transformation.
  </para>
</xs:doc>

<!--========================================================================-->
<xs:doc>
  <xs:title>Main logic</xs:title>
</xs:doc>

<xs:template>
  <para>
    Best guess at finding an attribute addressed as the last step of an XPath
    pattern as generated by the Schematron-to-XSLT transformation, that isn't
    the generic match of all nodes including attribute nodes.
  </para>
</xs:template>
<xsl:template match="xsl:template[not(@match='@*|node()')]
                                 [matches(@match,'@(([^/])|(\[.+?\]))+$')]/
                     xsl:apply-templates[@select='*']">
  <xsl:comment>
    The following instruction elided presuming the context to be an attribute
    thus not needing element children to be processed. Some processors will
    report this and so by removing the instruction then error reports are 
    less cluttered. See readme-massageXSLT4Schematron.html for details.
</xsl:comment>
  <xsl:comment select='string-join(("&lt;",name(.)," ",
                                    @*/concat(name(.),"=""",.,"""")),"")'/>
</xsl:template>

<xs:template>
  <para>
    The identity template is used to copy all nodes not already being handled
    by other template rules.
  </para>
</xs:template>
<xsl:template match="@*|node()" mode="#all">
  <xsl:copy>
    <xsl:apply-templates mode="#current" select="@*|node()"/>
  </xsl:copy>
</xsl:template>

</xsl:stylesheet>