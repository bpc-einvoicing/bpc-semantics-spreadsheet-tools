<project default="make" xmlns:if="ant:if" xmlns:unless="ant:unless">

<taskdef name="grep" classname="ise.antelope.tasks.Find"/>

<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

<target name="make">
  <!--other constants and lookup values-->
  <property name="thisdir" value="${user.dir}"/>
  <property name="utilitydir" value="${thisdir}/utilities/"/>
  <!--software timestamps-->
  <property name="ods2obdgc" value="20200809-0140z"/>
  <property name="cva2sch"   value="20130207-1940z"/>
  <!--documentation-->
  <echo message="ods2obdgc=${ods2obdgc}"/>
  <echo message="cva2sch=${cva2sch}"/>
  <echo message="dir=${dir}"/>
  <echo message="utilitydir=${utilitydir}"/>
  <echo message="thisdir=${thisdir}"/>
  <echo message="rawdir=${rawdir}"/>
  <echo message="title=${title}"/>
  <echo message="BPCversion=${BPCversion}"/>
  <echo message="UBLversion=${UBLversion}"/>
  <echo message="dateTime=${dateTime}"/>
  <echo message="ssGoogle=${ssGoogle}"/>
  <tstamp>
    <format property="wgettime" pattern="yyyy-MM-dd HH:mm:ss"/>
  </tstamp>
  <echo message="wgettime=${wgettime}"/>
  
  <available property="ods2obdgc-exists"
file="${utilitydir}Crane-ods2obdgc-${ods2obdgc}/Crane-ods2obdgc.xsl"/>
  <echo unless:set="ods2obdgc-exists" 
        message="Cannot find ods2obdgc=${ods2obdgc}"/>
  <available property="cva2sch-exists"
file="${utilitydir}Crane-cva2sch-${cva2sch}/utility/iso_schematron_assembly.xsl"/>
  <echo unless:set="cva2sch-exists" 
        message="Cannot find cva2sch=${cva2sch}"/>

  <!--update the stylesheet documentation-->
  <uptodate targetfile="readme-ssgc2sch.html"
            property="readme-ssgc2sch-okay">
    <srcfiles dir=".">
      <include name="ssgc2sch.xsl"/>
    </srcfiles>
  </uptodate>
  <antcall target="-make-doc">
    <param name="okay"   value="readme-ssgc2sch-okay"/>
    <param name="source" value="ssgc2sch.xsl"/>
    <param name="target" value="readme-ssgc2sch.html"/>
  </antcall>
  
  <uptodate targetfile="readme-gc2bpcxml.html"
            property="readme-gc2bpcxml-okay">
    <srcfiles dir=".">
      <include name="gc2bpcxml.xsl"/>
    </srcfiles>
  </uptodate>
  <antcall target="-make-doc">
    <param name="okay"   value="readme-gc2bpcxml-okay"/>
    <param name="source" value="gc2bpcxml.xsl"/>
    <param name="target" value="readme-gc2bpcxml.html"/>
  </antcall>
  
  <uptodate targetfile="readme-bpcprocess2sch.html"
            property="readme-bpcprocess2sch-okay">
    <srcfiles dir=".">
      <include name="bpcprocess2sch.xsl"/>
    </srcfiles>
  </uptodate>
  <antcall target="-make-doc">
    <param name="okay"   value="readme-bpcprocess2sch-okay"/>
    <param name="source" value="bpcprocess2sch.xsl"/>
    <param name="target" value="readme-bpcprocess2sch.html"/>
  </antcall>

  <uptodate targetfile="readme-bpccodelists2xsl.html"
            property="readme-bpccodelists2xsl-okay">
    <srcfiles dir=".">
      <include name="bpccodelists2xsl.xsl"/>
    </srcfiles>
  </uptodate>
  <antcall target="-make-doc">
    <param name="okay"   value="readme-bpccodelists2xsl-okay"/>
    <param name="source" value="bpccodelists2xsl.xsl"/>
    <param name="target" value="readme-bpccodelists2xsl.html"/>
  </antcall>

  <uptodate targetfile="readme-bpc-artifacts.html"
            property="readme-bpc-artifacts-okay">
    <srcfiles dir=".">
      <include name="readme-bpc-artifacts.xml"/>
      <include name="README-subset.svg"/>
    </srcfiles>
  </uptodate>
  <antcall target="-make-doc">
    <param name="okay"   value="readme-bpc-artifacts-okay"/>
    <param name="source" value="readme-bpc-artifacts.xml"/>
    <param name="target" value="readme-bpc-artifacts.html"/>
  </antcall>

  <!--start with the raw files-->
  <copy preservelastmodified="true" todir="${dir}/${BPCversion}-build">
    <fileset dir="${rawdir}">
      <include name="**"/>
    </fileset>
  </copy>
  <!--and the configuration files found in the base directory-->
  <copy preservelastmodified="true" todir="${dir}">
    <fileset dir=".">
      <include name="*"/>
      <exclude name="**/.git/**"/>
      <exclude name="**/.github/**"/>
      <exclude name="**/utilities/**"/>
      <exclude name="**/${dir}/**"/>
      <exclude name="**/${rawdir}/**"/>
    </fileset>
  </copy>
  
  <!--label the directory for future reference-->
  <echo file="${dir}/${BPCversion}-build/version-${BPCversion}.txt"
        message="${BPCversion}"/>
  <echo file="${dir}/${BPCversion}-build/version.txt"
        message="${BPCversion}"/>
  <echo file="${dir}/${BPCversion}-build/release-${dateTime}.txt"
        message="${dateTime}"/>
  <echo file="${dir}/${BPCversion}-build/release.txt"
        message="${dateTime}"/>

  <!--create GC files for business and signature-->
  <sequential unless:set="skip-gc">
    <delete file="${dir}/Semantics-Spreadsheet-${dateTime}.gc"/>
    
    <echo file="${dir}/wget-spreadsheet-time.txt" message="${wgettime}"/>
    <echo file="${dir}/wget-spreadsheet-uri.txt" message="${ssGoogle}"/>
    <exec executable="wget">
      <arg value="--no-check-certificate"/>
      <arg value="-O"/>
      <arg value="${dir}/BPC-Semantics-Spreadsheet-Google.ods"/>
      <arg value="${ssGoogle}/export?format=ods"/>
    </exec>
    <property name="lengthen-uri"
              location="${dir}/bpcSSmassage.xml"/>
    <property name="ident-uri"
              location="${dir}/bpcSSidentification.xml"/>
    <antcallback target="-ods2gc" return="returnGCss">
      <param name="okay"   value="gc-sig-okay"/>
      <param name="source" 
                   value="${dir}/BPC-Semantics-Spreadsheet-Google.ods"/>
      <param name="target" 
        value="${dir}/BPC-Semantics-Spreadsheet-${BPCversion}-${dateTime}.gc"/>
      <param name="identification-uri" value="${ident-uri}"/>
      <param name="lengthen-model-name-uri" value="${lengthen-uri}"/>
      <param name="returnProperty" value="returnGCss"/>
    </antcallback>
    <copy preservelastmodified="true" todir="${dir}/${BPCversion}-build/model/"
         file="${dir}/BPC-Semantics-Spreadsheet-${BPCversion}-${dateTime}.gc"/>
    <condition property="gcSScreated">
      <and>
        <isset property="returnGCss"/>
        <equals arg1="${returnGCss}" arg2="0"/>
      </and>
    </condition>
    <echo unless:set="gcSScreated"
          message="ERROR creating BPC Semantics genericode file"/>
    <touch unless:set="gcSScreated"
  file="${dir}/${BPCversion}-build/VALID-SEMANTICS-GC-FILE-NOT-GENERATED.txt"/>
  </sequential>

  <sequential if:set="gcSScreated">
    <echo message="Creating subset model genericode..."/>
    <move preservelastmodified="true"
          file="${dir}/UBL-Entities-${UBLversion}.gc"
          todir="${dir}/${BPCversion}-build/ubl"/>
    <java resultproperty="returnBPCxml" append="true"
          classname="net.sf.saxon.Transform">
       <arg value="-xsl:gc2bpcxml.xsl"/>
       <arg value=
   "-s:${dir}/${BPCversion}-build/model/BPC-Semantics-Spreadsheet-${BPCversion}-${dateTime}.gc"/>
       <arg value=
  "-o:${dir}/${BPCversion}-build/model/BPC-Semantics-Spreadsheet-${BPCversion}-${dateTime}.xml"/>
       <arg value=
        "+ublgc=${dir}/${BPCversion}-build/ubl/UBL-Entities-${UBLversion}.gc"/>
      <arg value="embedded-comment=&#xa;&#xa;XML serialization of BPC Semantics
Spreadsheet v${BPCversion} ${dateTime} from location:
&#xa;&#xa;${ssGoogle}&#xa;&#xa;"/>
    </java>
    <available property="bpcXMLerror"
file="${dir}/${BPCversion}-build/model/BPC-Semantics-Spreadsheet-${BPCversion}-${dateTime}.gc.errors.txt"/>
    <condition property="bpcXMLcreated">
      <and>
        <isset property="returnBPCxml"/>
        <equals arg1="${returnBPCxml}" arg2="0"/>
        <not>
          <isset property="bpcXMLerror"/>
        </not>
      </and>
    </condition>
    <echo unless:set="bpcXMLcreated"
          message="ERROR creating BPC Semantics XML file"/>
    <touch unless:set="bpcXMLcreated"
     file="${dir}/${BPCversion}-build/VALID-SEMANTICS-XML-FILE-NOT-GENERATED.txt"/>
    <copy preservelastmodified="true"
file="${dir}/${BPCversion}-build/model/BPC-Semantics-Spreadsheet-${BPCversion}-${dateTime}.xml"
      tofile="${dir}/${BPCversion}-build/model/BPC-Semantics-Spreadsheet.xml"/>
    <move preservelastmodified="true"
          file="${dir}/BPC-Semantics-Spreadsheet-Google.ods" 
tofile="${dir}/${BPCversion}-build/model/BPC-Semantics-Spreadsheet-${BPCversion}-${dateTime}.ods"/>

    <!--synthesize the invocations of the -sch4bpc Ant target and
        the input Schematron pattern harvested from the spreadsheet--> 
    <echo message="Creating process-specific Schematron for all processes..."/>
    <property name="antStaticScriptURI"
              location="${dir}/prepareBPCartefacts.xml"/>
    <move file="${dir}/bpcProcesses.xml"
          todir="${dir}/${BPCversion}-build/bpc"/>
    <java append="true" classname="net.sf.saxon.Transform">
      <arg value="--suppressXsltNamespaceCheck:on"/>
      <arg value="-xsl:bpcprocess2sch.xsl"/>
      <arg value="-s:${dir}/${BPCversion}-build/bpc/bpcProcesses.xml"/>
      <arg value="-o:${dir}/${BPCversion}-build/bpc/junk.out"/>
       <arg value=
"+semanticsSummary=${dir}/${BPCversion}-build/model/BPC-Semantics-Spreadsheet-${BPCversion}-${dateTime}.xml"/>
      <arg value=
              "+schemaSkeleton=${dir}/BPC-Skeleton-Data-Integrity-Constraints.sch"/>
      <arg value="+patternSkeleton=${dir}/BPC-Skeleton-Pattern.sch"/>
      <arg value="BPCversion=${BPCversion}"/>
      <arg value="dateTime=${dateTime}"/>
      <arg value="antDynamicScriptURI=../../doAllProcessAntScripts.xml"/>
    </java>

    <echo message="Creating the code list support stylesheet..."/>
    <java append="true" classname="net.sf.saxon.Transform">
      <arg value="--suppressXsltNamespaceCheck:on"/>
      <arg value="-xsl:bpccodelists2xsl.xsl"/>
      <arg value="-s:${dir}/BPC-Skeleton-Code-Lists.xsl"/>
      <arg value="-o:${dir}/${BPCversion}-build/bpc/BPC-v${BPCversion}-Code-Lists.xsl"/>
      <arg value="BPCversion=${BPCversion}"/>
      <arg value="dateTime=${dateTime}"/>
    </java>

    <!--invoke the synthesized script that, itself, will invoke -sch4bpc-->
    <ant antfile="${dir}/doAllProcessAntScripts.xml"
         useNativeBasedir="true">
      <property name="antStaticScriptURI"
                value="${antStaticScriptURI}"/>
      <property name="basedir" value="${basedir}"/>
    </ant>

  </sequential>
  
  <!--package it all up-->
  <antcall target="-package"/>
</target>

<!--========================================================================-->

<target name="-ods2gc" unless="${okay}">
  <delete file="${target}"/>
  <echo message='Rebuilding "${target}" GC file...'/>
  <java append="true" classname="net.sf.saxon.Transform">
    <arg value="-xsl:${utilitydir}Crane-ods2obdgc-${ods2obdgc}/Crane-ods2obdgc.xsl"/>
    <arg value="-o:${target}"/>
    <arg value="-it:ods-uri"/>
    <arg value="ods-uri=${source}"/>
    <arg value="identification-uri=${identification-uri}"/>
    <arg value="lengthen-model-name-uri=${lengthen-model-name-uri}"/>
    <arg value="raw-sheet-long-name=Worksheet Tab"/>
  </java>
  <available property="done" file="${target}"/>
  <sequential unless:set="done">
    <echo message="Unable to create GC file: ${target}"/>
    <property unless:set="done" name="${returnProperty}" value="1"/>
  </sequential>
  <sequential if:set="done">
    <property name="jarLocation" location="${utilitydir}xjparse"/>
    <echo message='Validating "${target}" GC file...'/>
    <java resultproperty="${returnProperty}" append="true" fork="true"
          classname="com.nwalsh.parsers.XJParse"
          classpath="${jarLocation}/xjparse.jar">
       <arg value="-S"/>
       <arg value="${utilitydir}genericode/xsd/genericode.xsd"/>
       <arg value="${target}"/>
    </java>
  </sequential>
</target>

<target name="-package">
  <delete dir="${dir}/bpc-semantics-tools-${BPCversion}-${dateTime}"/>
  <mkdir dir="${dir}/bpc-semantics-tools-${BPCversion}-${dateTime}"/>
  <copy preservelastmodified="true" todir="${dir}/bpc-semantics-tools-${BPCversion}-${dateTime}">
    <fileset dir="${dir}/${BPCversion}-build">
     <include name="**"/>
    </fileset>
  </copy>
  <touch if:set="skip-gc" file="${dir}/bpc-semantics-tools-${BPCversion}-${dateTime}/SPREADSHEET-GC-FILE-NOT-REGENERATED.txt"/>
  <mkdir dir="${dir}/bpc-semantics-tools-${BPCversion}-${dateTime}/archive-only-not-in-final-distribution"/>

  <copy preservelastmodified="true" includeEmptyDirs="false" todir=
      "${dir}/bpc-semantics-tools-${BPCversion}-${dateTime}/archive-only-not-in-final-distribution">
    <fileset dir=".">
      <include name="**"/>
      <exclude name="**/.git/**"/>
      <exclude name="**/.github/**"/>
      <exclude name="**/utilities/**"/>
      <exclude name="**/raw/**"/>
      <exclude name="**/${dir}/**"/>
    </fileset>
  </copy>
  <move preservelastmodified="true" includeEmptyDirs="false" todir=
      "${dir}/bpc-semantics-tools-${BPCversion}-${dateTime}/archive-only-not-in-final-distribution">
    <fileset dir="${dir}">
      <include name="*"/>
      <exclude name="artefacts.*.txt"/>
    </fileset>
  </move>
  
  <!--create distributable ZIP-->
  <move todir="${dir}">
    <fileset  dir="${dir}/bpc-semantics-tools-${BPCversion}-${dateTime}">
      <include name="**/archive-only-not-in-final-distribution/**"/>
      <exclude name="**/${BPCversion}-build/**"/>
      <exclude name="**/bpc-semantics-tools-${BPCversion}-${dateTime}/**"/>
    </fileset>
  </move>
  <zip destfile="${dir}/bpc-semantics-${BPCversion}-${dateTime}.zip"
       basedir="${dir}/bpc-semantics-tools-${BPCversion}-${dateTime}">
    <fileset dir="${dir}/bpc-semantics-tools-${BPCversion}-${dateTime}">
      <include name="**"/>
      <exclude name="bpc-semantics-${BPCversion}-${dateTime}.zip"/>
    </fileset>
  </zip>
  <delete dir="${dir}/bpc-semantics-tools-${BPCversion}-${dateTime}"/>
  <mkdir dir="${dir}/bpc-semantics-tools-${BPCversion}-${dateTime}"/>
  <move todir="${dir}/bpc-semantics-tools-${BPCversion}-${dateTime}">
    <fileset dir="${dir}">
      <include name="bpc-semantics-${BPCversion}-${dateTime}.zip"/>
      <include name="**/archive-only-not-in-final-distribution/**"/>
      <exclude name="**/${BPCversion}-build/**"/>
      <exclude name="**/bpc-semantics-tools-${BPCversion}-${dateTime}/**"/>
    </fileset>
  </move>
  
  <!--remove unneeded files to reduce storage burden-->
  <delete dir="${dir}/${BPCversion}-build"/>
  
  <!--documentation-->
  <echo message="dateTime=${dateTime}"/>
  
</target>

<target name="-make-doc" unless="${okay}">
  <delete file="${target}"/>
  <echo message='Rebuilding "${target}" documentation...'/>
  <java failonerror="yes" append="true" classname="com.icl.saxon.StyleSheet">
    <arg value="-w2"/>
    <arg value="-a"/>
    <arg value="-o"/>
    <arg value="${target}"/>
    <arg value="${source}"/>
  </java>
  <available property="done" file="${target}"/>
  <fail unless="done" message="Unable to create documentation: ${target}"/>
  <echo message="Checking..."/>
  <loadfile property="temp" srcFile="${target}"/>
  <grep caseinsensitive="true" in="${temp}" 
        regex="inconsistencies detected" property="${target}-found"/>
  <antcall target="-error-doc-html"/>
  <echo message="Clean build of: ${target}"/>
</target>

<!--this process sets the time stamp of the output to be 2 minutes before
    the time stamp of the input so that the output will be dected to be
    needed to be regenerated next time around; without it, the error
    will be reported once, but not multiple times-->
<target name="-error-doc-html" if="${target}-found">
  <tstamp>
    <format property="then" pattern="yyyyMMdd-HHmmss"/>
    <format property="earlier" pattern="yyyyMMdd-HHmmss" offset="-2" 
            unit="minute"/>
  </tstamp>
  <touch datetime="${earlier}" pattern="yyyyMMdd-HHmmss" file="${target}"/>
  <touch datetime="${then}" pattern="yyyyMMdd-HHmmss" file="${source}"/>
  <fail message="Inconsistencies detected: ${target}"/>
</target>

<!--========================================================================-->

<!--this target is invoked from an Ant script that is synthesized by
    bpcprocess2sch.xsl stylesheet, creating one invocation for each
    process-->

<target name="-sch4bpc" unless="${okay}">
  <echo message="Creating shell Schematron for ${process}"/>
  <copy file="${dir}/${BPCversion}-build//ubl/UBL-DocumentConstraints-2.3.pattern.sch"
        todir="${dir}/${BPCversion}-build/bpc/${process}"/>
  <antcall target="-sch2xsl">
    <param name="schin" value=
"${dir}/${BPCversion}-build/bpc/${process}/BPC-${process}-v${BPCversion}-Data-Integrity-Constraints.sch"/>
    <param name="xslout" value=
"${dir}/${BPCversion}-build/bpc/${process}/BPC-${process}-v${BPCversion}-Data-Integrity-Constraints.xsl"/>
  </antcall>
</target>

<target name="-sch2xsl" unless="${okay}">
  <delete file="${xslout}"/>
  <echo message="Creating ${xslout} from ${schin}"/>
  <java append="true" classname="com.icl.saxon.StyleSheet">
     <arg value="-o"/>
     <arg value="${xslout}"/>
     <arg value="${schin}"/>
     <arg value="${utilitydir}schematron/code/iso_svrl_for_xslt2.xsl"/>
  </java>
  <echo message="Validating
${dir}/${BPCversion}-build/bpc/${process}/BPC-${process}-Data-Integrity-Constraints.xsl..."/>
  <java resultproperty="returnXSLTtest" fork="true"
        outputproperty="outputXSLTtest"
        jar="${saxon9heJar}"
        errorproperty="errorXSLTtest">
   <arg value=
"-xsl:${dir}/${BPCversion}-build/bpc/${process}/BPC-${process}-Data-Integrity-Constraints.xsl"/>
   <arg value=
"-s:${dir}/${BPCversion}-build/bpc/${process}/BPC-${process}-Data-Integrity-Constraints.xsl"/>
  </java>
  <echo message="${errorXSLTtest}"/>
  <condition property="xsl${process}created">
    <and>
      <isset property="returnXSLTtest"/>
      <equals arg1="${returnXSLTtest}" arg2="0"/>
    </and>
  </condition>
  <echo unless:set="xsl${process}created"
        message="ERROR with the BPC Semantics XSLT file ${dir}/${BPCversion}-build/bpc/${process}/BPC-${process}-Data-Integrity-Constraints.xsl"/>
  <echo unless:set="xsl${process}created" message="${errorXSLTtest}"
        file=
"${dir}/${BPCversion}-build/bpc/${process}/BPC-${process}-Data-Integrity-Constraints.error.txt"/>
  <echo unless:set="xsl${process}created" message="${errorXSLTtest}"
   file="${dir}/${BPCversion}-build/ERROR-RUNNING-RESULTING-XSLT-FOR-${process}.txt"/>
</target>

</project>