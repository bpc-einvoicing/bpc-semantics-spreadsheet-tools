<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl"
                 href="utilities/article/article-html.xsl"?>
<article conformance="ids ebuzzwords quotes">
  <title>BPC Semantic Model Validation Artifacts - v0.2</title>
  <articleinfo>
    <pubdate>2021-03-13 02:40z</pubdate>
    <copyright>
      <year>2021</year>
      <year>Business Payments Coalition</year>
    </copyright>
    <legalnotice>
      <title>Executive summary</title>
      <para>This documents the use of the demonstration BPC Semantics validation artefacts that can be incorporated into one’s process of accepting UBL ISO/IEC 19845 document instances across the BPC network.</para>
    </legalnotice>
  </articleinfo>
  <section id="S-INTRODUCTION">
    <title>Introduction</title>
    <para>In the 4-corner model it is the responsibility of Corner 2 to send semantically- and syntactically-valid documents to Corner 3, per the definitions and constraints of the Business Payments Coalition (BPC) governance. Corner 2 presents to Corner 3 the data received from Corner 1 however
      Corner 1 may have the information encoded and transmitted to Corner 2. In turn, Corner 3 presents to Corner 4 the information received from Corner 2 however Corner 4 wishes to have it encoded and transmitted.</para>
    <para>Nevertheless, it is incumbent on Corner 3 to validate explicitly that the data received from Corner 2 conforms to the structure of the UBL ISO/IEC 19845 schema document model and to the data integrity constraints of the BPC semantic model. Such checking ensures that the application code
      can assume not only that the information is in the correct structure, but also that the integrity of the data as dictated by the BPC is whole. Also, it will help identify delinquent Corners 2 who fail to send information correctly across the network.</para>
    <para>The Java-based tools described in this document and made available in this package are sample implementations of the Corner 3 processes of validating incoming XML instances from Corner 2, checking in two passes that the data conforms to UBL constraints and conforms to BPC
      constraints.</para>
  </section>
  <section id="S-DATA-FLOWS">
    <title>Data flows</title>
    <para>In <xref linkend="F-XML-DOCUMENT-EGRESS-GENERATION-AND-INGRESS-INGESTION"/> the two artifacts, the complete UBL schema and data integrity constraint checking, used by Corner 3 in the two-phase validation are depicted with the labels ① and ③ at the bottom right.</para>
    <figure id="F-XML-DOCUMENT-EGRESS-GENERATION-AND-INGRESS-INGESTION">
      <title>XML document egress (generation) and ingress (ingestion)</title>
      <mediaobject>
        <imageobject>
          <imagedata role="html-embed" fileref="README-subset.svg"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>These two artifacts fulfill the only required steps in the egress and ingress of documents from Corner 2 to Corner 3. Also depicted in the diagram, with the label ②, is the minimum subset schema representing the repertoire of UBL semantics selected by the BPC to represent sufficient
      information to be sent across the network. Using the subset schema is discretionary as Corner 2 may have different means by which the BPC subset of UBL semantics is represented during code generation. Using that schema and the same BPC constraint checking as used by Corner 3, depicted in both
      corners with the label ③, Corner 2 can pre-validate the outgoing XML content as a self-check so as not to violate its governance commitment to send only BPC-valid content.</para>
    <para>A UBL document sent by Corner 2 across the network may include schema-valid representations of additional semantics beyond the BPC repertoire, but Corner 3 is only obliged to recognize the BPC suite. Corner 3 may choose to support more, but Corner 2 cannot rely on Corner 3 supporting more
      than the BPC repertoire.</para>
    <para>In <xref linkend="F-MESSAGE-INTERCHANGE"/> the flow of messages is summarized. In the flow labeled ① the sender of the document acting as Corner 1 sends the semantic content of their document wrapped using whatever format that is compatible their own business system and is agreed to with
      Corner 2. In the flow labeled ② Corner 2 uses UBL syntax to wrap the semantic information for Corner 3. In the two flows labeled ③ Corner 3 either (a) returns a failure message back to Corner 2 due to a failure interpreting the UBL syntax or violating the BPC data integrity constraints, or (b)
      passes the semantic content found in the UBL syntax to Corner 4 wrapped using whatever format is compatible with Corner 4’s business system and Corner 4 agrees to use.</para>
    <figure id="F-MESSAGE-INTERCHANGE">
      <title>Message interchange</title>
      <mediaobject>
        <imageobject>
          <imagedata role="html-embed" fileref="README-flow.svg"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Many, but not all, document types will trigger the need shown in the flow labeled ④ for the receiver trading partner to return to the sender a status of the document that was received when the receiver was acting as Corner 4. To do so, the receiver now acts as the new Corner 1 in the flow
      labeled ④, sending the document status in a private format to their access point now acting as the new Corner 2. In the flow labeled ⑤ the new Corner 2 sends the document status information wrapped in UBL syntax to the original sender’s access point now acting as the new Corner 3. In the two
      flows labeled ⑥ the new Corner 3 either (a) returns a failure message back to the new Corner 2 due to a failure interpreting the UBL syntax or violating the BPC data integrity constraints, or (b) passes the semantic content found in the UBL syntax to the original sender acting as the new
      Corner 4 wrapped using whatever format is compatible with Corner 4’s business system and Corner 4 agrees to use.</para>
  </section>
  <section id="S-DEMONSTRATION-ARTIFACTS">
    <title>Demonstration artifacts</title>
    <para>In this section, <literal>WWWWWWW</literal> refers to the document type, <literal>X.Y</literal> refers to the version number, and <literal>PZZ</literal> refers to the process number.</para>
    <para>This package named “<literal>bpc-semantics-vX.Y-{revision-date}.zip</literal>” contains the following developer-referenced files in the indicated subdirectories:</para>
    <itemizedlist>
      <listitem>
        <para><literal>readme-bpc-artifacts.html</literal> - this documentation file</para>
      </listitem>
      <listitem>
        <para><literal>release-{revision-date}.txt</literal> and <literal>release.txt</literal> - the date of the revision of the release in UTC (Zulu) time as “<literal>CCYYMMDD-HHMMSSz</literal>”</para>
      </listitem>
      <listitem>
        <para><literal>version-vX.Y.txt</literal> and <literal>version.txt</literal> - the version of the release as “<literal>x.y</literal>”</para>
      </listitem>
      <listitem>
        <para><literal>bpc/bpcProcesses.xml</literal> - an XML summary of the titles and document types involved in each of the BPC processes for which the semantics have been determined (this XML follows a straightforward colloquial schema for which a formal schema is not available)</para>
      </listitem>
      <listitem>
        <para><literal>bpc/PZZ/BPC-PZZ-WWWWWWWW-Data-Integrity-Constraints.xsl</literal> - the master XSLT stylesheet for process <literal>PZZ</literal> for document type <literal>WWWWWWW</literal> implementing artifact ③ in the data flow</para>
      </listitem>
      <listitem>
        <para><literal>bpc/PZZ/BPC-PZZ-vX.Y-WWWWWWWW-Data-Integrity-Constraints.sch</literal> - the master <ulink url="https://standards.iso.org/ittf/PubliclyAvailableStandards" conformance="skip">ISO/IEC 19757-3 DSDL Schematron</ulink> assertion schema used as the source to synthesize the XSLT
          artifact ③ in the data flow (developers deploying alternative implementations of Schematron can do so using this file)</para>
      </listitem>
    </itemizedlist>
    <para>The following files are fragments utilized by the developer-referenced files and are never intended to be used standalone by developers; these files have no facility when used on their own:</para>
    <itemizedlist>
      <listitem>
        <para><literal>bpc/BPC-v0.1-Code-Lists.xsl</literal> - an XSLT stylesheet fragment providing code list value validation support to the data integrity checking stylesheet</para>
      </listitem>
      <listitem>
        <para><literal>bpc/PZZ/BPC-PZZ-vX.Y-WWWWWWWW-Data-Integrity-Constraints.xsl</literal> - an XSLT stylesheet fragment providing the basic semantic value checking</para>
      </listitem>
      <listitem>
        <para><literal>bpc/PZZ/BPC-PZZ-vX.Y-Assertions.pattern.sch</literal> - the Schematron pattern expressing the basic BPC semantic value constraints</para>
      </listitem>
      <listitem>
        <para><literal>bpc/PZZ/UBL-DocumentConstraints.pattern.sch</literal> - the Schematron pattern expressing the basic UBL document constraints as described in the standard</para>
      </listitem>
    </itemizedlist>
    <para>The following files describe the BPC model subset and associated semantics as formally recorded in the BPC Semantics spreadsheet <ulink url="https://docs.google.com/spreadsheets/d/1qAz_aAbJ99ikA4zUk97FyjyDLcsQ3B3vqjEK-b3C_h8/view" conformance="skip">available for viewing on Google
        here</ulink>:</para>
    <itemizedlist>
      <listitem>
        <para><literal>BPC-Semantics-Spreadsheet.xml</literal> and <literal>BPC-Semantics-Spreadsheet-vX.Y-{revision-date}.xml</literal> - an XML summary of the semantic information (this XML follows a straightforward colloquial schema for which a formal schema is not available)</para>
      </listitem>
      <listitem>
        <para><literal>BPC-Semantics-Spreadsheet-vX.Y-{revision-date}.xlsx</literal> and <literal>BPC-Semantics-Spreadsheet-vX.Y-{revision-date}.ods</literal> - spreadsheet serializations in office document formats for Excel and OpenOffice (respectively)</para>
      </listitem>
      <listitem>
        <para><literal>BPC-Semantics-Spreadsheet-vX.Y-{revision-date}.gc</literal> - spreadsheet serialization in OASIS genericode XML format</para>
      </listitem>
    </itemizedlist>
    <para>The following files describe the portion of UBL 2.3 (Committee Specification Draft 03) relevant to the BPC work <ulink url="https://docs.oasis-open.org/ubl/csd03-UBL-2.3/" conformance="skip">available on the OASIS web site here</ulink>:</para>
    <itemizedlist>
      <listitem>
        <para><literal>ubl/UBL-DocumentConstraints.pattern.sch</literal> - the Schematron pattern expressing the basic UBL document constraints as described in the standard</para>
      </listitem>
      <listitem>
        <para><literal>ubl/UBL-Entities-2.3.gc</literal> - the summary of all UBL semantics in OASIS genericode XML format</para>
      </listitem>
    </itemizedlist>
    <itemizedlist>
      <listitem>
        <para><literal>ubl/All-UBL-2.3-Documents.html</literal> - the summary of all UBL semantics as a single large hyperlinked HTML file</para>
      </listitem>
      <listitem>
        <para><literal>ubl/UBL-CreditNote-2.3.html</literal> - the summary of UBL Credit Note semantics as a hyperlinked HTML file</para>
      </listitem>
      <listitem>
        <para><literal>ubl/UBL-Invoice-2.3.html</literal> - the summary of UBL Invoice semantics as a hyperlinked HTML file</para>
      </listitem>
      <listitem>
        <para><literal>ubl/xsd/maindoc/*.xsd</literal> - all UBL 2.3 document XSD XML schema expressions of the UBL semantics (use the appropriate of these to implement artifact ① in the data flow)</para>
      </listitem>
      <listitem>
        <para><literal>ubl/xsd/common/*.xsd</literal> - support schema expressions of the UBL semantics (these XSD fragments have no facility when used on their own)</para>
      </listitem>
    </itemizedlist>
    <para>The following code list files in OASIS genericode format support the validation of coded value domains:</para>
    <itemizedlist>
      <listitem>
        <para><literal>codelist/IANA-Media-Types.gc</literal> - MIME types</para>
      </listitem>
      <listitem>
        <para><literal>codelist/ISO-3166.gc</literal> - country codes</para>
      </listitem>
      <listitem>
        <para><literal>codelist/ISO-4217.gc</literal> - currency codes</para>
      </listitem>
      <listitem>
        <para><literal>codelist/UNECE-4461.gc</literal> - payment means</para>
      </listitem>
      <listitem>
        <para><literal>codelist/UNECE-5153.gc</literal> - tax type</para>
      </listitem>
      <listitem>
        <para><literal>codelist/UNECE-5189.gc</literal> - allowance/charge reason code</para>
      </listitem>
      <listitem>
        <para><literal>codelist/UNECE-5305.gc</literal> - tax category</para>
      </listitem>
      <listitem>
        <para><literal>codelist/UNECE-Rec-20.gc</literal> - Units of measure</para>
      </listitem>
    </itemizedlist>
    <para>The demonstration directory is the <literal>val/</literal> directory (see <xref linkend="S-DEMONSTRATION-EXECUTION"/> for details):</para>
    <itemizedlist>
      <listitem>
        <para><literal>*.jar</literal> - open-source project Java executables implementing validation and transformation (see the included notices for open-source details)</para>
      </listitem>
      <listitem>
        <para><literal>*.bat</literal> - Windows-based invocations in a DOS command box</para>
      </listitem>
      <listitem>
        <para><literal>*.sh</literal> - shell-based invocations in a *nix terminal</para>
      </listitem>
      <listitem>
        <para><literal>*.xml</literal> - demonstration test files</para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="S-JAVA">
    <title>Java</title>
    <para>Java must be installed in the environment before the demonstration can run or one can validate their own test files. To know if Java is ready to be used, one simply enters the command that brings up the “Usage:” summary:</para>
    <programlisting>C:\>java
Usage: java [-options] class [args...]
           (to execute a class)
   or  java [-options] -jar jarfile [args...]
           (to execute a jar file)
where options include:
<emphasis>...followed by many lines...</emphasis></programlisting>
    <para>If the command cannot be found, an error message will be displayed.</para>
  </section>
  <section id="S-DEMONSTRATION-EXECUTION">
    <title>Demonstration execution</title>
    <para>A running Java-based demonstration of the two-phase ingestion of a BPC XML document is in the <literal>val/</literal> subdirectory. </para>
    <para>There are four illustrative XML instances being validated:</para>
    <itemizedlist>
      <listitem>
        <para><literal>invoice-test-bad-syntax.xml</literal> - a document with an XML syntax error on line 9</para>
        <itemizedlist>
          <listitem>
            <para>the end delimiter of the closing tag for the <literal>cbc:ID</literal> element is missing</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para><literal>invoice-test-bad-model.xml</literal> - a document with a UBL model error on line 9</para>
        <itemizedlist>
          <listitem>
            <para>the <literal>cbc:ID</literal> element is misspelled as <literal>cbc:IDxxxxxxx</literal></para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para><literal>invoice-test-bad-data.xml</literal> - a document with two BPC data integrity errors:</para>
        <itemizedlist>
          <listitem>
            <para>the registration name for the payee party is absent</para>
          </listitem>
          <listitem>
            <para>the payable rounding amount is absent and so the arithmetic for the payable amount calculation is incorrect</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para><literal>invoice-test-good.xml</literal> - a valid UBL document without violating BPC data integrity constraints</para>
      </listitem>
    </itemizedlist>
    <para>To run the demonstration there is an invocation for each of the Windows and Shell environments:</para>
    <itemizedlist>
      <listitem>
        <para>Windows:</para>
        <itemizedlist>
          <listitem>
            <para>
              <programlisting>cd val\
test.bat</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Shell:</para>
        <itemizedlist>
          <listitem>
            <para>
              <programlisting>cd val/
sh test.sh</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
    <para>The following is a transcript of the output of running the demonstration:</para>
    <programlisting>############################################################
Validating invoice-test-bad-syntax.xml
############################################################
============== Phase 1: XSD schema validation ==============
org.xml.sax.SAXParseException; systemId: invoice-test-bad-syntax.xml;
 lineNumber: 10; columnNumber: 2; The end-tag for element type "cbc:ID" must end
 with a '>' delimiter.
	at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.SAXParserImpl.parse(Unknown Source)
	at javax.xml.parsers.SAXParser.parse(SAXParser.java:274)
	at com.nwalsh.parsers.XJParser.xsdParse(Unknown Source)
	at com.nwalsh.parsers.XJParser.parse(Unknown Source)
	at com.nwalsh.parsers.XJParse.run(Unknown Source)
	at com.nwalsh.parsers.XJParse.main(Unknown Source)
Exception in thread "main" java.lang.NullPointerException
	at com.nwalsh.parsers.XJParser.printParseStats(Unknown Source)
	at com.nwalsh.parsers.XJParse.run(Unknown Source)
	at com.nwalsh.parsers.XJParse.main(Unknown Source)
Attempting well-formed, namespace-aware parse
Fatal error:invoice-test-bad-syntax.xml:10:2:The end-tag for element type
 "cbc:ID" must end with a '>' delimiter.

############################################################
Validating invoice-test-bad-model.xml
############################################################
============== Phase 1: XSD schema validation ==============
Attempting well-formed, namespace-aware parse
Error:invoice-test-bad-model.xml:9:17:cvc-complex-type.2.4.a: Invalid content
 was found starting with element 'cbc:IDxxxxxxx'. One of
 '{"urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2":ID}'
 is expected.
Parse succeeded (0.18) with 1 error and no warnings.

############################################################
Validating invoice-test-bad-data.xml
############################################################
============== Phase 1: XSD schema validation ==============
No schema validation errors.
============ Phase 2: BPC process P01 data integrity validation ============
1. Seller name is not specified or exists more than once. /Invoice/cac:PayeeParty[1]
 / count(cac:PartyLegalEntity/cbc:RegistrationName) = 1 (:NABT-59 Tab '1 Invoice,
 Credit Note' Row 69:)
2. Amount Due for Payment (NABT-115) is not equal to the total amount with tax
 (NABT-112) minus PrePaid Amount (NABT-113) plus Rounding Amount (NABT-114).
 /Invoice/cac:LegalMonetaryTotal[1]/cbc:PayableAmount[1] / bpc:compareAmountsEqual( 
 ., sum( ( ../cbc:TaxInclusiveAmount, -1 * ../cbc:PrepaidAmount, 
 ../cbc:PayableRoundingAmount ) ) ) (:NABT-115 Tab '1 Invoice, Credit Note' Row 167:)
Count of errors: 2
Error in xsl:value-of/@select on line 93 column 67 of testSVRL4UBLerrors.xsl:
  XTMM9000: Processing terminated by xsl:message at line 93 in testSVRL4UBLerrors.xsl
Processing terminated by xsl:message at line 93 in testSVRL4UBLerrors.xsl

############################################################
Validating invoice-test-good.xml
############################################################
============== Phase 1: XSD schema validation ==============
No schema validation errors.
============ Phase 2: BPC process P01 data integrity validation ============
No data integrity validation errors.</programlisting>
  </section>
  <section id="S-VALIDATING-ONES-OWN-TEST-FILES">
    <title>Validating one’s own test files</title>
    <para>To validate a test document of one’s own that is found in the <literal>val/</literal> directory there is a Java-based invocation for each of the Windows and Shell environments:</para>
    <itemizedlist>
      <listitem>
        <para>Windows:</para>
        <itemizedlist>
          <listitem>
            <para><programlisting>validate.bat  ubl-schema-file  bpc-process-PZZ  WWWWWWW  ubl-xml-file</programlisting>for example from the <literal>test.bat</literal> demonstration:</para>
            <programlisting>validate.bat  ..\ubl\xsd\maindoc\UBL-Invoice-2.3.xsd P01 Invoice invoice-test-good.xml</programlisting>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Shell:</para>
        <itemizedlist>
          <listitem>
            <para><programlisting>sh validate.sh  ubl-schema-file  bpc-process-PZZ  WWWWWWW  ubl-xml-file</programlisting>for example from the <literal>test.sh</literal> demonstration:</para>
            <programlisting>sh validate.sh  ../ubl/xsd/maindoc/UBL-Invoice-2.3.xsd P01 Invoice invoice-test-good.xml</programlisting>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
    <para>When there is an error of any kind, the script creates a file named by adding the “<literal>.error.txt</literal>” suffix to the input file name and records the error information in that file.</para>
    <para>When there is a data integrity error, the script also creates a file named by adding the “<literal>.svrl.xml</literal>” suffix to the input file name and records the Schematron SVRL record information in that file.</para>
    <para>For example, if one has a test file for Process 05 named <literal>myCreditNoteTest.xml</literal> in the <literal>val\</literal> directory then in Windows one would use:</para>
    <para><programlisting>validate.bat ..\ubl\xsd\maindoc\UBL-CreditNote-2.3.xsd P05 CreditNote myCreditNoteTest.xml</programlisting>and when running from another directory one need only point to the invocation and schema:</para>
    <programlisting>bpc-semantics-0.1-20200924-011846z\val\validate.bat bpc-semantics-0.1-20200924-011846z\ubl\xsd\maindoc\UBL-CreditNote-2.3.xsd P05 CreditNote myCreditNoteTest.xml</programlisting>
    <para>And if one is using Shell in the <literal>val/</literal> directory one would use:</para>
    <para><programlisting>sh validate.sh ../ubl/xsd/maindoc/UBL-CreditNote-2.3.xsd P05 CreditNote myCreditNoteTest.xml</programlisting>and when running from another directory one need only point to the invocation and schema:</para>
    <programlisting>sh bpc-semantics-0.1-20200924-011846z/val/validate.sh bpc-semantics-0.1-20200924-011846z/ubl/xsd/maindoc/UBL-CreditNote-2.3.xsd P05 CreditNote myCreditNoteTest.xml</programlisting>
  </section>
  <!--  <bibliography>
    <para>See article-bibliography.xml for bibliographic entries.</para>
  </bibliography>-->
</article>
