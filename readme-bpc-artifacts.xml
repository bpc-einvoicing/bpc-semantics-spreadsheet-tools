<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl"
                 href="utilities/article/article-html.xsl"?>
<!DOCTYPE article [
<!ENTITY stamp SYSTEM "readme-bpc-artifacts-timestamp.txt">
]>
<article conformance="ids ebuzzwords quotes">
  <title>BPC Semantic Model Validation Artifacts - v0.3</title>
  <articleinfo>
    <pubdate>&stamp;</pubdate>
    <copyright>
      <year>2021</year>
      <year>Business Payments Coalition</year>
    </copyright>
    <legalnotice>
      <title>Executive summary</title>
      <para>This documents the use of the demonstration BPC Semantics validation artefacts that can be incorporated into one’s process of accepting UBL ISO/IEC 19845 document instances across the BPC network.</para>
    </legalnotice>
  </articleinfo>
  <section id="S-INTRODUCTION">
    <title>Introduction</title>
    <para>In the 4-corner model it is the responsibility of Corner 2 to send semantically- and syntactically-valid documents to Corner 3, per the definitions and constraints of the Business Payments Coalition (BPC) governance. Corner 2 presents to Corner 3 the data received from Corner 1 however
      Corner 1 may have the information encoded and transmitted to Corner 2. In turn, Corner 3 presents to Corner 4 the information received from Corner 2 however Corner 4 wishes to have it encoded and transmitted.</para>
    <para>Nevertheless, it is incumbent on Corner 3 to validate explicitly that the data received from Corner 2 conforms to the structure of the UBL ISO/IEC 19845 schema document model and to the data integrity constraints of the BPC semantic model. Such checking ensures that the application code
      can assume not only that the information is in the correct structure, but also that the integrity of the data as dictated by the BPC is whole. Also, it will help identify delinquent Corners 2 who fail to send information correctly across the network.</para>
    <para>The Java-based tools described in this document and made available in this package are sample implementations of the Corner 3 processes of validating incoming XML instances from Corner 2, checking in two passes that the data conforms to UBL constraints and conforms to BPC
      constraints.</para>
  </section>
  <section id="S-MESSAGE-FLOWS">
    <title>Message flows</title>
    <para>In <xref linkend="F-MESSAGE-INTERCHANGE"/> the flow of messages is summarized. In the flow labeled ① the sender of the document acting as Corner 1 sends the semantic content of their document wrapped using whatever format that is compatible their own business system and is agreed to with
      Corner 2. In the flow labeled ② Corner 2 uses UBL syntax to wrap the semantic information for Corner 3. In the two flows labeled ③ Corner 3 either (a) returns a failure message back to Corner 2 due to a failure interpreting the UBL syntax or violating the BPC data integrity constraints, or (b)
      passes the semantic content found in the UBL syntax to Corner 4 wrapped using whatever format is compatible with Corner 4’s business system and Corner 4 agrees to use.</para>
    <figure id="F-MESSAGE-INTERCHANGE">
      <title>Message interchange</title>
      <mediaobject>
        <imageobject>
          <imagedata role="html-embed" fileref="README-flow.svg"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Many, but not all, document types will trigger the need shown in the flow labeled ④ for the receiver trading partner to return to the sender a status of the document that was received when the receiver was acting as Corner 4. To do so, the receiver now acts as the new Corner 1 in the flow
      labeled ④, sending the document status in a private format to their access point now acting as the new Corner 2. In the flow labeled ⑤ the new Corner 2 sends the document status information wrapped in UBL syntax to the original sender’s access point now acting as the new Corner 3. In the two
      flows labeled ⑥ the new Corner 3 either (a) returns a failure message back to the new Corner 2 due to a failure interpreting the UBL syntax or violating the BPC data integrity constraints, or (b) passes the semantic content found in the UBL syntax to the original sender acting as the new
      Corner 4 wrapped using whatever format is compatible with Corner 4’s business system and Corner 4 agrees to use.</para>
  </section>
  <section id="S-DATA-FLOWS-AND-VALIDATION-ARTIFACTS">
    <title>Data flows and validation artifacts</title>
    <para>In <xref linkend="F-XML-DOCUMENT-INGRESS-INGESTION"/> the two validation artifacts, the complete UBL W3C XML schema and the data integrity constraint checking Schematron schema, used by Corner 3 in the two-phase validation are depicted.</para>
    <figure id="F-XML-DOCUMENT-INGRESS-INGESTION">
      <title>XML document ingress (ingestion)</title>
      <mediaobject>
        <imageobject>
          <imagedata role="html-embed" fileref="README-Corner-3.svg"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>One-time preparation (before receiving first business document):</para>
    <para>&#x2460; - the OASIS committee has created a W3C XSD XML schema for all UBL documents</para>
    <para>&#x2461; - the BPC has created a Schematron (ISO/IEC 19757-3) schema for BPC data integrity rules</para>
    <para>&#x2462; - the BPC has created an XSLT runtime script for BPC data integrity rules</para>
    <para>Run-time processing (does not require changes to one-time files):</para>
    <para>&#x2463; - the BPC business document in UBL XML format from Corner 2 arrives successfully at Corner 3 according to the AS4 transport protocol and AS4 receipt acknowledgement (AS4 processes not depicted)</para>
    <para>&#x2464; - using W3C XSD XML Schema validation, if the BPC XML breaks any UBL structural or lexical constraints then an “SV” (syntax validation) rejection BPC XML message is sent back to Corner 2 and the work of Corner 3 is done</para>
    <para>&#x2465; - using XSLT transformation, if the BPC XML breaks any BPC data integrity constraints then a “BV” (data integrity violation) rejection BPC XML message is sent back to Corner 2 and the work of Corner 3 is done</para>
    <para>&#x2466; - Corner 3 rearranges the business document information from UBL XML format to Corner 4’s private data format and forwards it to Corner 4 and the work of Corner 3 is done</para>
    <para>A UBL document sent by Corner 2 across the network may include schema-valid representations of additional semantics beyond the BPC repertoire, but Corner 3 is only obliged to recognize the BPC suite. Corner 3 may choose to support more, but Corner 2 cannot rely on Corner 3 supporting more
      than the BPC repertoire.</para>
    <para>In this section, <literal>WWWWWWW</literal> refers to the document type (e.g. Invoice), <literal>X.Y</literal> refers to the version number (e.g. 0.3), and <literal>ZZZ</literal> refers to the customization (at this point either “Minimum”, “Core”, or “Extended” for the Invoice).</para>
    <para>This package named “<literal>bpc-semantics-vX.Y-{revision-date}.zip</literal>” contains the following developer-referenced files in the indicated subdirectories:</para>
    <itemizedlist>
      <listitem>
        <para><literal>readme-bpc-artifacts.html</literal> - this documentation file</para>
      </listitem>
      <listitem>
        <para><literal>release-{revision-date}.txt</literal> and <literal>release.txt</literal> - the date of the revision of the release in UTC (Zulu) time as “<literal>CCYYMMDD-HHMMSSz</literal>”</para>
      </listitem>
      <listitem>
        <para><literal>version-vX.Y.txt</literal> and <literal>version.txt</literal> - the version of the release as “<literal>x.y</literal>”</para>
      </listitem>
      <listitem>
        <para><literal>bpc/bpcCustomizations.xml</literal> - an XML summary of the titles and document types involved in each of the BPC customizations for which the semantics have been determined (this XML follows a straightforward colloquial schema for which a formal schema is not
          available)</para>
      </listitem>
      <listitem>
        <para><literal>bpc/ZZZ/BPC-ZZZ-WWWWWWWW-Data-Integrity-Constraints.xsl</literal> - the master XSLT stylesheet for customization <literal>ZZZ</literal> for document type <literal>WWWWWWW</literal> implementing artifact ③ in the data flow (using this invocation in your test suites will
          preclude the need to modify invocations for different versions of the semantic library)</para>
      </listitem>
      <listitem>
        <para><literal>bpc/ZZZ/BPC-ZZZ-vX.Y-WWWWWWWW-Data-Integrity-Constraints.sch</literal> - the master <ulink url="https://standards.iso.org/ittf/PubliclyAvailableStandards" conformance="skip">ISO/IEC 19757-3 DSDL Schematron</ulink> assertion schema used as the source to synthesize the XSLT
          artifact ③ in the data flow (developers deploying alternative implementations of Schematron can do so using this file)</para>
      </listitem>
    </itemizedlist>
    <para>The following files in the <literal>bpc/</literal> subdirectories are fragments utilized by the developer-referenced files and are never intended to be used standalone by developers; these files have no facility when used on their own:</para>
    <itemizedlist>
      <listitem>
        <para><literal>BPC-v0.1-Code-Lists.xsl</literal> - an XSLT stylesheet fragment providing code list value validation support to the data integrity checking stylesheet <emphasis>(not implemented at this time)</emphasis></para>
      </listitem>
      <listitem>
        <para><literal>ZZZ/BPC-ZZZ-vX.Y-WWWWWWWW-Data-Integrity-Constraints.xsl</literal> - an XSLT stylesheet fragment providing the basic semantic value checking</para>
      </listitem>
      <listitem>
        <para><literal>ZZZ/BPC-ZZZ-vX.Y-Assertions.pattern.sch</literal> - the Schematron pattern expressing the basic BPC semantic value constraints</para>
      </listitem>
      <listitem>
        <para><literal>ZZZ/UBL-DocumentConstraints.pattern.sch</literal> - the Schematron pattern expressing the basic UBL document constraints as described in the standard</para>
      </listitem>
    </itemizedlist>
    <para>The following files in the <literal>model/</literal> describe the BPC model subset and associated semantics as formally recorded in the BPC Semantics spreadsheet <ulink url="https://docs.google.com/spreadsheets/d/1qAz_aAbJ99ikA4zUk97FyjyDLcsQ3B3vqjEK-b3C_h8/view" conformance="skip"
        >available for viewing on Google here</ulink>:</para>
    <itemizedlist>
      <listitem>
        <para><literal>BPC-Semantics-Spreadsheet.xml</literal> and <literal>BPC-Semantics-Spreadsheet-vX.Y-{revision-date}.xml</literal> - an XML summary of the semantic information (this XML follows a straightforward colloquial schema for which a formal schema is not available)</para>
      </listitem>
      <listitem>
        <para><literal>BPC-Semantics-Spreadsheet-vX.Y-{revision-date}.xlsx</literal> and <literal>BPC-Semantics-Spreadsheet-vX.Y-{revision-date}.ods</literal> - spreadsheet serializations in office document formats for Excel and OpenOffice (respectively)</para>
      </listitem>
      <listitem>
        <para><literal>BPC-Semantics-Spreadsheet-vX.Y-{revision-date}.gc</literal> - spreadsheet serialization in OASIS genericode XML format</para>
      </listitem>
    </itemizedlist>
    <para>The following files in the <literal>ubl/</literal> subdirectory describe the portion of UBL 2.3 (Committee Specification Draft 03) relevant to the BPC work <ulink url="https://docs.oasis-open.org/ubl/csd03-UBL-2.3/" conformance="skip">available on the OASIS web site here</ulink>:</para>
    <itemizedlist>
      <listitem>
        <para><literal>UBL-DocumentConstraints.pattern.sch</literal> - the Schematron pattern expressing the basic UBL document constraints as described in the standard</para>
      </listitem>
      <listitem>
        <para><literal>UBL-Entities-2.3.gc</literal> - the summary of all UBL semantics in OASIS genericode XML format</para>
      </listitem>
    </itemizedlist>
    <itemizedlist>
      <listitem>
        <para><literal>All-UBL-2.3-Documents.html</literal> - the summary of all UBL semantics as a single large hyperlinked HTML file</para>
      </listitem>
      <listitem>
        <para><literal>UBL-ApplicationResponse-2.3.html</literal> - the summary of UBL Application Response semantics as a hyperlinked HTML file</para>
      </listitem>
      <listitem>
        <para><literal>UBL-CreditNote-2.3.html</literal> - the summary of UBL Credit Note semantics as a hyperlinked HTML file</para>
      </listitem>
      <listitem>
        <para><literal>UBL-DocumentStatus-2.3.html</literal> - the summary of UBL Document Status semantics as a hyperlinked HTML file</para>
      </listitem>
      <listitem>
        <para><literal>UBL-Invoice-2.3.html</literal> - the summary of UBL Invoice semantics as a hyperlinked HTML file</para>
      </listitem>
      <listitem>
        <para><literal>xsd/maindoc/*.xsd</literal> - all 91 UBL 2.3 document XSD XML schema expressions of the UBL semantics (use the appropriate of these to implement artifact ① in the data flow)</para>
      </listitem>
      <listitem>
        <para><literal>xsd/common/*.xsd</literal> - support schema expressions of the UBL semantics (these XSD fragments have no facility when used on their own)</para>
      </listitem>
    </itemizedlist>
    <para>The following code list files in OASIS genericode format support the validation of coded value domains:</para>
    <itemizedlist>
      <listitem>
        <para><literal>codelist/IANA-Media-Types.gc</literal> - MIME types</para>
      </listitem>
      <listitem>
        <para><literal>codelist/ISO-3166.gc</literal> - country codes</para>
      </listitem>
      <listitem>
        <para><literal>codelist/ISO-4217.gc</literal> - currency codes</para>
      </listitem>
      <listitem>
        <para><literal>codelist/UNECE-4461.gc</literal> - payment means</para>
      </listitem>
      <listitem>
        <para><literal>codelist/UNECE-5153.gc</literal> - tax type</para>
      </listitem>
      <listitem>
        <para><literal>codelist/UNECE-5189.gc</literal> - allowance/charge reason code</para>
      </listitem>
      <listitem>
        <para><literal>codelist/UNECE-5305.gc</literal> - tax category</para>
      </listitem>
      <listitem>
        <para><literal>codelist/UNECE-Rec-20.gc</literal> - Units of measure</para>
      </listitem>
    </itemizedlist>
    <para>The demonstration directory is the <literal>val/</literal> directory (see <xref linkend="S-DEMONSTRATION-EXECUTION"/> for details):</para>
    <itemizedlist>
      <listitem>
        <para><literal>*.xml</literal> - demonstration test files</para>
      </listitem>
      <listitem>
        <para><literal>*.jar</literal> - open-source project Java executables implementing validation and transformation (see the included notices for open-source details)</para>
      </listitem>
      <listitem>
        <para><literal>*.sh</literal> - shell-based invocations in a *nix terminal</para>
      </listitem>
      <listitem>
        <para><literal>*.bat</literal> - Windows-based invocations in a DOS command box</para>
      </listitem>
      <listitem>
        <para><literal>windows-drag-n-drop/*.bat</literal> - Windows-based invocations using drag-n-drop functionality supporting dropping the XML file to be validated onto the batch file in Windows Explorer</para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="S-JAVA">
    <title>Java</title>
    <para>Java must be installed in the environment before the demonstration can run or one can validate their own test files. To know if Java is ready to be used, one simply enters the command that brings up the “Usage:” summary:</para>
    <programlisting>C:\>java
Usage: java [-options] class [args...]
           (to execute a class)
   or  java [-options] -jar jarfile [args...]
           (to execute a jar file)
where options include:
<emphasis>...followed by many lines...</emphasis></programlisting>
    <para>If the command cannot be found, an error message will be displayed.</para>
  </section>
  <section id="S-DEMONSTRATION-EXECUTION">
    <title>Demonstration execution</title>
    <para>A running Java-based demonstration of the two-phase ingestion of a BPC XML document is in the <literal>val/</literal> subdirectory. </para>
    <para>There are four illustrative XML instances being validated:</para>
    <itemizedlist>
      <listitem>
        <para><literal>Invoice-test-bad-syntax.xml</literal> - a document with an XML syntax error on line 9</para>
        <itemizedlist>
          <listitem>
            <para>the end delimiter of the closing tag for the <literal>cbc:ID</literal> element is missing</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para><literal>Invoice-test-bad-model.xml</literal> - a document with a UBL model error on line 9</para>
        <itemizedlist>
          <listitem>
            <para>the <literal>cbc:ID</literal> element is misspelled as <literal>cbc:IDxxxxx</literal></para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para><literal>Invoice-test-bad-data.xml</literal> - a document with one BPC data integrity for customization ‘core’ and two BPC data integrity errors for customization ‘extended’:</para>
        <itemizedlist>
          <listitem>
            <para>the first error is a UBL error violating the rule that all elements must have some content, either text or other elements (but not both), and never can be empty</para>
          </listitem>
          <listitem>
            <para>the second error is a BPC error violating the rule that a party’s name cannot be absent nor is there allowed to be more than one name for a party</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para><literal>Invoice-test-good.xml</literal> - a valid UBL document without violating BPC data integrity constraints</para>
      </listitem>
    </itemizedlist>
    <para>To run the demonstration there is an invocation for each of the Windows and Shell environments:</para>
    <itemizedlist>
      <listitem>
        <para>Windows command line:</para>
        <itemizedlist>
          <listitem>
            <para>
              <programlisting>cd val\
test.bat</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Windows explorer:</para>
        <itemizedlist>
          <listitem>
            <para>double-click on <literal>test.bat</literal> to execute the program in a pop-up window (the batch file will pause at the end)</para>
          </listitem>
          <listitem>
            <para>note that lengthy reports will scroll out of the history of window lines so they may not appear when scrolling back to find them</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Shell:</para>
        <itemizedlist>
          <listitem>
            <para>
              <programlisting>cd val/
sh test.sh</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
    <para>The following is a transcript of the output of running the demonstration:</para>
    <programlisting>############################################################
Validating using customization "Core" and type "Invoice": "Invoice-Core-test-bad-syntax.xml"
############################################################
===== Phase 1: XSD schema validation =====
org.xml.sax.SAXParseException; systemId: file:///Users/admin/u/git/bpc/
 bpc-semantics-spreadsheet-tools/results/bpc-semantics-tools-0.3-test/
 bpc-semantics-0.3-test/val/Invoice-Core-test-bad-syntax.xml;
 lineNumber: 10; columnNumber: 2; The end-tag for element type "cbc:ID"
 must end with a '>' delimiter.
	at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.SAXParserImpl.parse(Unknown Source)
	at javax.xml.parsers.SAXParser.parse(SAXParser.java:274)
	at com.nwalsh.parsers.XJParser.xsdParse(Unknown Source)
	at com.nwalsh.parsers.XJParser.parse(Unknown Source)
	at com.nwalsh.parsers.XJParse.run(Unknown Source)
	at com.nwalsh.parsers.XJParse.main(Unknown Source)
Exception in thread "main" java.lang.NullPointerException
	at com.nwalsh.parsers.XJParser.printParseStats(Unknown Source)
	at com.nwalsh.parsers.XJParse.run(Unknown Source)
	at com.nwalsh.parsers.XJParse.main(Unknown Source)
Attempting well-formed, namespace-aware parse
Fatal error:file:///Users/admin/u/git/bpc/bpc-semantics-spreadsheet-tools/results/
 bpc-semantics-tools-0.3-test/bpc-semantics-0.3-test/val/
 Invoice-Core-test-bad-syntax.xml:10:2:The end-tag for element type "cbc:ID"
 must end with a '>' delimiter.

############################################################
Validating using customization "Core" and type "Invoice": "Invoice-Core-test-bad-model.xml"
############################################################
===== Phase 1: XSD schema validation =====
Attempting well-formed, namespace-aware parse
Error:file:///Users/admin/u/git/bpc/bpc-semantics-spreadsheet-tools/results/
 bpc-semantics-tools-0.3-test/bpc-semantics-0.3-test/val/
 Invoice-Core-test-bad-model.xml:9:16:cvc-complex-type.2.4.a: Invalid content
 was found starting with element 'cbc:IDxxxxx'. One of
 '{"urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2":ID}' is expected.
Parse succeeded (0.9) with 1 error and no warnings.

############################################################
Validating using customization "Core" and type "Invoice": "Invoice-Core-test-bad-data.xml"
############################################################
===== Phase 1: XSD schema validation =====
No schema validation errors.
===== Phase 2: BPC customization "Core" data integrity validation =====
1. [IND5] Elements SHALL NOT be empty /Invoice/cac:AccountingCustomerParty[1]/
 cac:Party[1]/cac:PostalAddress[1]/cbc:PostalZone[1] / true()
2. Fewer or more than one trading name. /Invoice/cac:AccountingCustomerParty[1] /
 count(cac:Party/cac:PartyName/cbc:Name) = 1 (:NABT-045 Row 105 Tab
 'Invoice, Credit Note':)
Count of errors: 2
Error in xsl:value-of/@select on line 97 column 67 of testSVRL4UBLerrors.xsl:
  XTMM9000: Processing terminated by xsl:message at line 97 in testSVRL4UBLerrors.xsl
Processing terminated by xsl:message at line 97 in testSVRL4UBLerrors.xsl

############################################################
Validating using customization "Core" and type "Invoice": "Invoice-Core-test-good.xml"
############################################################
===== Phase 1: XSD schema validation =====
No schema validation errors.
===== Phase 2: BPC customization "Core" data integrity validation =====
No data integrity validation errors.</programlisting>
    <para>Also included is a script to run all of the document types in both of the customizations for both “good” and “bad” test files:</para>
    <itemizedlist>
      <listitem>
        <para>Windows command line:</para>
        <itemizedlist>
          <listitem>
            <para>
              <programlisting>cd val\
testall.bat</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Windows explorer:</para>
        <itemizedlist>
          <listitem>
            <para>double-click on <literal>testall.bat</literal> to execute the program in a pop-up window (the batch file will pause at the end)</para>
          </listitem>
          <listitem>
            <para>note that lengthy reports will scroll out of the history of window lines so they may not appear when scrolling back to find them</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Shell:</para>
        <itemizedlist>
          <listitem>
            <para>
              <programlisting>cd val/
sh testall.sh</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
  </section>
  <section id="S-VALIDATING-ONES-OWN-TEST-FILES">
    <title>Validating one’s own test files</title>
    <para>To validate a test document of one’s own that is found in your local computer file system there is a Java-based invocation for each of the Windows and Shell environments:</para>
    <itemizedlist>
      <listitem>
        <para>Windows drag-n-drop:</para>
        <itemizedlist>
          <listitem>
            <para>fully extract the nested ZIP files into your file system because drag-n-drop does not work from inside ZIP extractor virtual directories</para>
          </listitem>
          <listitem>
            <para>open the unzipped <literal>val/windows-drag-n-drop/</literal> directory in Windows Explorer to reveal the available invocations</para>
          </listitem>
          <listitem>
            <para>drag your XML file from Windows Explorer where it is being edited, and drop it onto the corresponding invocation batch file performing the desired validation</para>
            <figure id="F-WINDOWS-DRAG-N-DROP">
              <title>Windows Drag-n-Drop</title>
              <mediaobject>
                <imageobject>
                  <imagedata role="html-embed" fileref="README-drag.svg"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
          <listitem>
            <para>a command window will open up revealing the results until a key is pressed to make the window disappear</para>
            <figure id="F-WINDOWS-DROP-EXECUTION">
              <title>Windows Drop Execution</title>
              <mediaobject>
                <imageobject>
                  <imagedata role="html-embed" fileref="README-drop.svg"/>
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Windows DOS prompt:</para>
        <itemizedlist>
          <listitem>
            <para><programlisting>validate.bat  customization  document-type  ubl-xml-file</programlisting>for example from the <literal>test.bat</literal> demonstration:</para>
            <programlisting>validate.bat  Core Invoice Invoice-test-good.xml</programlisting>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Shell:</para>
        <itemizedlist>
          <listitem>
            <para><programlisting>sh validate.sh  customization  document-type  ubl-xml-file</programlisting>for example from the <literal>test.sh</literal> demonstration:</para>
            <programlisting>sh validate.sh  Core Invoice Invoice-test-good.xml</programlisting>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
    <para>When there is an error of any kind, the script creates a file named by adding the “<literal>.error.txt</literal>” suffix to the input file name and records the error information in that file.</para>
    <para>When there is a data integrity error, the script also creates a file named by adding the “<literal>.svrl.xml</literal>” suffix to the input file name and records the Schematron SVRL record information in that file.</para>
    <para>For example, if one has a test file for customization ‘core’ named <literal>myCreditNoteTest.xml</literal> in the <literal>val\</literal> directory then in Windows one would use:</para>
    <para><programlisting>validate.bat Core CreditNote myCreditNoteTest.xml</programlisting>and when running from another directory one need only point to the invocation and schema:</para>
    <programlisting>bpc-semantics-0.3-20211221-023232z\val\validate.bat Core CreditNote myCreditNoteTest.xml</programlisting>
    <para>And if one is using Shell in the <literal>val/</literal> directory one would use:</para>
    <para><programlisting>sh validate.sh Core CreditNote myCreditNoteTest.xml</programlisting>and when running from another directory one need only point to the invocation and schema:</para>
    <programlisting>sh bpc-semantics-0.3-20211221-023232z/val/validate.sh Core CreditNote myCreditNoteTest.xml</programlisting>
  </section>
  <section id="S-EXAMPLES">
    <title>Examples</title>
    <para>The <literal>examples/</literal> subdirectory has a number of example BPC UBL XML instances. The <literal>val/test-examples.bat</literal> and <literal>val/test-examples.sh</literal> invocations check each of these examples. In Windows Explorer, double-click on
        <literal>test-examples.bat</literal> to execute the program in a pop-up window (the batch file will pause at the end). Note that lengthy reports will scroll out of the history of window lines so they may not appear when scrolling back to find them</para>
  </section>
  <!--  <bibliography>
    <para>See article-bibliography.xml for bibliographic entries.</para>
  </bibliography>-->
</article>
