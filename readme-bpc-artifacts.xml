<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl"
                 href="utilities/article/article-html.xsl"?>
<article conformance="ids ebuzzwords quotes">
  <title>BPC Semantic Model Validation Artifacts</title>
  <articleinfo>
    <copyright>
      <year>2020</year>
      <year>Business Payments Coalition</year>
    </copyright>
    <authorgroup>
      <author>
        <firstname>G. Ken</firstname>
        <surname>Holman</surname>
        <affiliation>
          <orgname>Crane Softwrights Ltd.</orgname>
          <address><email>gkholman@CraneSoftwrights.com</email></address>
        </affiliation>
      </author>
    </authorgroup>
    <legalnotice>
      <title>Executive summary</title>
      <para>This documents the use of the BPC Semantics validation artefacts.</para>
    </legalnotice>
  </articleinfo>
  <section id="S-INTRODUCTION">
    <title>Introduction</title>
    <para>In the 4-corner model it is the responsibility of Corner 2 to send semantically- and syntactically-valid documents to Corner 3. It is incumbent on Corner 3 to validate explicitly that the received data conforms to the structure of the UBL schema document model and to the data integrity
      constraints of the BPC semantic model. In <xref linkend="F-XML-DOCUMENT-GENERATION-AND-INGESTION"/> these two artifacts used in the two-phase validation are labeled 1 and 3:</para>
    <figure id="F-XML-DOCUMENT-GENERATION-AND-INGESTION">
      <title>XML document generation and ingestion</title>
      <mediaobject>
        <imageobject>
          <imagedata role="html-embed" fileref="README-subset.svg"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>
  <section id="S-DEMONSTRATION">
    <title>Demonstration</title>
    <para>A running demonstration of the two-phase ingestion of a BPC XML document is in the <literal>val/</literal> subdirectory. </para>
    <para>There are four illustrative XML instances being validated:</para>
    <itemizedlist>
      <listitem>
        <para>a document with a syntax error on line 7</para>
        <itemizedlist>
          <listitem>
            <para>the end delimiter of the closing tag for the <literal>cbc:ID</literal> element is missing</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>a document with a model error on line 7</para>
        <itemizedlist>
          <listitem>
            <para>the <literal>cbc:ID</literal> element is misspelled as <literal>cbc:IDxxxxxxx</literal></para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>a document with a data integrity error:</para>
        <itemizedlist>
          <listitem>
            <para>two identifiers are provided for the payee party, when there is a maximum of only 1</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>a valid document</para>
      </listitem>
    </itemizedlist>
    <para>To run the demonstration there is an invocation for each of the Windows and Shell environments:</para>
    <itemizedlist>
      <listitem>
        <para>Windows:</para>
        <itemizedlist>
          <listitem>
            <para>
              <programlisting>cd val\
test.bat</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Shell::</para>
        <itemizedlist>
          <listitem>
            <para>
              <programlisting>cd val/
sh test.sh</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
    <para>The following is a transcript of the output of running the demonstration:</para>
    <programlisting>############################################################
Validating invoice-test-bad-syntax.xml
############################################################
============== Phase 1: XSD schema validation ==============
org.xml.sax.SAXParseException; systemId: 
  file:///Users/admin/test/val/invoice-test-bad-syntax.xml; 
  lineNumber: 7; columnNumber: 2; The end-tag for element type 
  "cbc:ID" must end with a '>' delimiter.
	at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.SAXParserImpl.parse(Unknown Source)
	at javax.xml.parsers.SAXParser.parse(SAXParser.java:274)
	at com.nwalsh.parsers.XJParser.xsdParse(Unknown Source)
	at com.nwalsh.parsers.XJParser.parse(Unknown Source)
	at com.nwalsh.parsers.XJParse.run(Unknown Source)
	at com.nwalsh.parsers.XJParse.main(Unknown Source)
Exception in thread "main" java.lang.NullPointerException
	at com.nwalsh.parsers.XJParser.printParseStats(Unknown Source)
	at com.nwalsh.parsers.XJParse.run(Unknown Source)
	at com.nwalsh.parsers.XJParse.main(Unknown Source)
Attempting well-formed, namespace-aware parse
Fatal error:file:///Users/admin/test/val/invoice-test-bad-syntax.xml:
  7:2:The end-tag for element type "cbc:ID" must end with a '>' delimiter.

############################################################
Validating invoice-test-bad-model.xml
############################################################
============== Phase 1: XSD schema validation ==============
Attempting well-formed, namespace-aware parse
Error:file:///Users/admin/test/val/invoice-test-bad-model.xml:6:17:cvc-complex-type.2.4.a: 
  Invalid content was found starting with element 'cbc:IDxxxxxxx'. One of 
  '{"urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2":CustomizationID,
  "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2":ProfileID,
  "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2":ProfileExecutionID,
  "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2":ID}' is expected.
Parse succeeded (0.17) with 1 error and no warnings.

############################################################
Validating invoice-test-bad-data.xml
############################################################
============== Phase 1: XSD schema validation ==============
No schema validation errors.
============ Phase 2: BPC process P01 data integrity validation ============
ERROR: More than one Supplier - Accounts Receivable Identifier exists.

############################################################
Validating invoice-test-good.xml
############################################################
============== Phase 1: XSD schema validation ==============
No schema validation errors.
============ Phase 2: BPC process P01 data integrity validation ============
No data integrity validation errors.</programlisting>
    <para>To validate a document there is an invocation for each of the Windows and Shell environments:</para>
    <itemizedlist>
      <listitem>
        <para>Windows:</para>
        <itemizedlist>
          <listitem>
            <para><programlisting>validate.bat  ubl-schema-file  bpc-process-Pxx  ubl-xml-file</programlisting>for example from the <literal>test.bat</literal> demonstration:</para>
            <programlisting>call validate.bat  ..\ubl\xsd\maindoc\UBL-Invoice-2.2.xsd P01 invoice-test-good.xml</programlisting>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Shell::</para>
        <itemizedlist>
          <listitem>
            <para><programlisting>sh validate.sh  ubl-schema-file  bpc-process-Pxx  ubl-xml-file</programlisting>for example from the <literal>test.sh</literal> demonstration:</para>
            <programlisting>sh validate.sh  ../ubl/xsd/maindoc/UBL-Invoice-2.2.xsd P01 invoice-test-good.xml</programlisting>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
  </section>
  <!--  <bibliography>
    <para>See article-bibliography.xml for bibliographic entries.</para>
  </bibliography>-->
</article>
